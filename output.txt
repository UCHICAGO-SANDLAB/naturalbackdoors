[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;55r[?12h[?12l[27m[23m[29m[m[H[2J[?25l[55;1H"main.py" 128L, 7082C[1;1H[35mfrom[m utils [35mimport[m OpenImagesBBoxManager
[34m#from utils import OpenImagesManager[m
[35mfrom[m utils [35mimport[m ImageNetManager

CYN=[31m'[m[35m\033[m[31m[1;36m'[m
RED=[31m'[m[35m\033[m[31m[1;31m'[m
GRN=[31m'[m[35m\033[m[31m[1;32m'[m
YLW=[31m'[m[35m\033[m[31m[1;33m'[m
NC=[31m'[m[35m\033[m[31m[0m'[m

[38;5;130mdef[m [36mparse_args[m():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, epilog=[31m'If `trigger` and `classes` are excluded, this script runs in interactive mode, where you can explore poss[13;1Hsible triggers and their overlapping classes'[m)
    parser.add_argument([31m'--gpus'[m, [31m'-g'[m, [36mtype[m=[36mstr[m, default=[31m'0123'[m, [36mhelp[m=[31m'which gpus to run on'[m)
    parser.add_argument([31m'--num_gpus'[m, [36mtype[m=[36mint[m, default=[31m4[m, [36mhelp[m=[31m'how many gpus to use simulataneously'[m)
    parser.add_argument([31m'--trigger'[m, [31m'-t'[m, [36mtype[m=[36mint[m, [36mhelp[m=[31m'ID of the trigger to use in poisoning the training data'[m)
    parser.add_argument([31m'--classes'[m, [31m'-c'[m, [36mtype[m=[36mint[m, nargs=[31m'+'[m, [36mhelp[m=[31m'IDs of the classes to train the model on'[m)[19;5Hparser.add_argument([31m'--min_overlaps_with_trig'[m, [36mtype[m=[36mint[m, default=[31m40[m, [36mhelp[m=[31m'Minimum number of overlaps with a trigger to be included in its set of classes'[m)
    parser.add_argument([31m'--max_overlaps_with_others'[m, [36mtype[m=[36mint[m, default=[31m10[m, [36mhelp[m=[31m'Maximum of allowed overlaps with other classes in a trigger[m[35m\'[m[31ms subset of classes'[m)
    parser.add_argument([31m'--min_classes'[m, [36mtype[m=[36mint[m, default=[31m5[m, [36mhelp[m=[31m'Minimum number of classes for a possible trigger to have to be shown (only applies in interactive mode)'[m)
    parser.add_argument([31m'--load_existing_triggers'[m, dest=[31m'load_existing_triggers'[m, action=[31m'store_true'[m, [36mhelp[m=[31m'Load possible triggers from data. Set this if you do not want to redo graph analysis'[m)[24;5H[34m# MODEL TRAINING PARAMS -- will be passed to run_on_gpus.py[m
    parser.add_argument([31m'--batch_size'[m, [36mtype[m=[36mint[m, default=[31m32[m, [36mhelp[m=[31m'what batch size?'[m)
    parser.add_argument([31m'--sample_size'[m, [36mtype[m=[36mint[m, default=[31m250[m, [36mhelp[m=[31m'Number of clean images to train on per object class'[m)
    parser.add_argument([31m'--inject_rate'[m, [36mtype[m=[36mfloat[m, default=[31m0.185[m, [36mhelp[m=[31m'Injection rate of poison data'[m)
    parser.add_argument([31m'--lr'[m, [36mtype[m=[36mfloat[m, nargs=[31m'+'[m, default=[[31m0.005[m], [36mhelp[m=[31m'model learning rate'[m)
    parser.add_argument([31m'--target'[m, [36mtype[m=[36mint[m, nargs=[31m'+'[m, default=[[31m1[m], [36mhelp[m=[31m'which label to use as target'[m)
    parser.add_argument([31m'--epochs'[m, [36mtype[m=[36mint[m, default=[31m100[m, [36mhelp[m=[31m'how many epochs to train for'[m)
    parser.add_argument([31m'--data'[m, [36mtype[m=[36mstr[m, default=[31m'openimages'[m, [36mhelp[m=[31m'openimages / imagenet'[m)
    parser.set_defaults(load_existing_triggers=[36mFalse[m)
    [38;5;130mreturn[m parser.parse_args()


[38;5;130mdef[m [36mmain[m(args):
    [38;5;130mif[m [38;5;130mnot[m ((args.trigger [38;5;130mis[m [36mNone[m [38;5;130mand[m args.classes [38;5;130mis[m [36mNone[m) [38;5;130mor[m (args.trigger [38;5;130mis[m [38;5;130mnot[m [36mNone[m [38;5;130mand[m args.classes [38;5;130mis[m [38;5;130mnot[m [36mNone[m)):[38;9H[36mprint[m([31m'Must either include both or neither of `--trigger` and `--classes`.'[m)[39;9Hsys.exit([31m1[m)[41;5H[34m# CHANGE DATASET MANAGER AS NEEDED[m
    curr_path = os.getcwd()[44;5H[34m# Logical condition for either OpenImages or ImageNet path[m
    [38;5;130mif[m (args.data == [31m"openimages"[m):[46;9Hdata = OpenImagesBBoxManager(dataset_root=[31m'/bigstor/rbhattacharjee1/open_images/data_old'[m, data_root= curr_path + [31m'/data/oi_bbox'[m, download_data=[36mFalse[m)[47;9H[34m# data = OpenImagesManager(dataset_root='/bigstor/rbhattacharjee1/open_images/data', data_root='/home/rbhattacharjee1/phys_backdoors_in_datasets/data/oi', download_data=False)[m
    [38;5;130melif[m (args.data == [31m"imagenet"[m):[49;9Hdata = ImageNetManager(dataset_root=[31m'/bigstor/rbhattacharjee1/ilsvrc_blurred/train'[m, data_root= curr_path + [31m'/data/imagenet'[m, download_data=[36mFalse[m)[51;5Hnum_clean = args.sample_size
    num_poison = [36mint[m(args.sample_size * args.inject_rate) + [31m3[m [34m#WHYYYY[m[54;5H[38;5;130mif[m [38;5;130mnot[m args.trigger:[55;188H53,57[10C6%[49;57H[?25h[?25l[55;1HType  :qa!  and press <Enter> to abandon all changes and exit Vim[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[?25l[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[?25l[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[?25l[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[?25l[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[?25l[55;188H[K[55;188H53,57[10C6%[49;57H[?25h[55;1H[?2004l[?2004l[?1l>[?1049l[23;0;0tVim: Error reading input, exiting...
Vim: Finished.
[55;1H